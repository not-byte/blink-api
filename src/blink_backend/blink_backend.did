type Language = variant {
    Polish;
    English;
};

type Theme = variant {
    Dark;
    Light;
    System;
};

type Status = variant {
    Online;
    Away;
    DoNotDisturb;
    Offline;
};

type User = record {
    "principal": principal;
    username: text;
    avatar: opt text;
    language: Language;
    theme: Theme;
    status: Status;
};

type Text = record {
    content: text;
};

type Image = record {
    name: text;
    src: text;
};

type MessageContent = variant {
    Text: Text;
    Image: Image;
};

type Message = record {
    id: nat64;
    message: MessageContent;
    caller: principal;
    timestamp: nat64;
};

type LastMessage = record {
    conversation_id: nat64;
    conversation_image: opt text;
    content: text;
    timestamp: nat64;
    user: User;
};

type Conversation = record {
    id: nat64;
    name: text;
    users: vec User;
    messages: vec Message;
};

type Error = record {
    message: text;
};

// Why generics don't exist here???

type Result = variant {
    Ok: null;
    Err: Error;
};

type ResultText = variant {
    Ok: text;
    Err: Error;
};

type ResultConversation = variant {
    Ok: Conversation;
    Err: Error;
};

type ResultLastMessage = variant {
    Ok: opt LastMessage;
    Err: Error;
};

type ResultWithId = variant {
    Ok: nat64;
    Err: Error;
};

type ResultUserConversations = variant {
    Ok: vec Conversation;
    Err: Error;
};

type ResultUser = variant {
    Ok: opt User;
    Err: Error;
};

service : {
    create_conversation: (vec principal) -> (ResultWithId);
    remove_conversation: (nat64) -> (Result);
    update_conversation: (nat64, opt text) -> (Result);
    add_to_conversation: (nat64, vec principal) -> (Result);
    leave_conversation: (nat64) -> (Result);
    get_user_conversations: () -> (ResultUserConversations) query;

    send_message: (nat64, text) -> (ResultWithId);
    send_image: (nat64, text, text) -> (ResultWithId);
    get_messages: (nat64) -> (ResultConversation) query;
    remove_message: (nat64, nat64) -> (Result);
    update_message: (nat64, nat64, text) -> (Result);
    get_last_message: (nat64) -> (ResultLastMessage) query;

    get_user: () -> (ResultUser) query;
    add_user: (text, opt text) -> (Result);
    update_user: (opt text, opt text, opt Language, opt Theme, opt Status) -> (Result);

    greet: () -> (ResultText) query;

    // For canister contest
    get_users: () -> (vec User) query;
}
